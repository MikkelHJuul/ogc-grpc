
syntax = "proto3";

package org.ogc.api.grpc.proxy;

/*  Add your Swagger!

openapi v3 will come: https://github.com/grpc-ecosystem/grpc-gateway/issues/441
v2 is not restricted (openapi as a IDL is not even a requirement)
one could even with a long-shot say that any API is OGC-WFS as long as it supports
the data structure suggested in these .proto -files. and have the basic landing page stuff...
exposing it as "application/protobuf"(https://tools.ietf.org/html/draft-rfernando-protocol-buffers-00#section-7) is not particularly restricted

resources:
https://github.com/grpc-ecosystem/grpc-gateway
https://github.com/grpc-ecosystem/grpc-gateway/blob/master/examples/internal/proto/examplepb/a_bit_of_everything.proto

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "ogc-inspire-api";
    version: "1.0";
    contact: {
      name: "someone";
      url: "https://ogc.org/something/something";
      email: "noone@example.com";
    };
    license: {
      name: "",
      url: ""
    };
    extensions: {
			key: "x-something-something";
			value {
				string_value: "yadda";
			}
		};
  };

  external_docs: {
		url: "https://my.web.page.org/ogc-wfs/docs";
    description: "More info on my ogc implementation";
	}

  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json"; //? is this true?
  produces: "application/json";
  produces: "application/geo+json"
  security_definitions: {
    //whatever
  };
  //http://docs.ogc.org/is/17-069r3/17-069r3.html#http_status_codes
  // these are examples and only 200,400 and 404 are mandatory
  responses: { //mandatory
		key: "200";
		value: {
			description: "A successful request.";
		}
	}
	// Recommendation 3
	// The service SHOULD support entity tags and the associated headers as specified by HTTP/1.1
  responses: {
		key: "304";
		value: {
			description: "An entity tag was provided in the request and the resource has not been changed since the previous request. see http://docs.ogc.org/is/17-069r3/17-069r3.html#web_caching";
			//
		}
	}
  //mandatory - Requirement 8 - http://docs.ogc.org/is/17-069r3/17-069r3.html#query_parameters
	//The server SHALL respond with a response with the status code 400, if the request URI includes a query parameter that is not specified in the API definition.
  responses: {
		key: "400";
		value: {
			description: "The server cannot or will not process the request due to an apparent client error. For example, a query parameter had an incorrect value.";
			//
		}
	}
  responses: {
		key: "401";
		value: {
			description: "The request requires user authentication. The response includes a WWW-Authenticate header field containing a challenge applicable to the requested resource.";
		}
	}
  responses: {
		key: "403";
		value: {
			description: "The server understood the request, but is refusing to fulfill it. While status code 401 indicates missing or bad authentication, status code 403 indicates that authentication is not the issue, but the client is not authorized to perform the requested operation on the resource.";
		}
	}
	//mandatory - Requirement 8 - http://docs.ogc.org/is/17-069r3/17-069r3.html#query_parameters
	//The server SHALL respond with a response with the status code 400, if the request URI includes a query parameter that is not specified in the API definition.
	responses: {
		key: "404";
		value: {
			description: "The requested resource does not exist on the server. For example, a path parameter had an incorrect value.";
		}
	}
	responses: {
		key: "403";
		value: {
			description: "The request method is not supported. For example, a POST request was submitted, but the resource only supports GET requests.";
		}
	}
	responses: {
		key: "406";
		value: {
			description: "The Accept header submitted in the request did not support any of the media types supported by the server for the requested resource.";
		}
	}
	responses: {
		key: "500";
		value: {
			description: "An internal error occurred in the server.";
      //consider adding header
			schema: {
				json_schema: {
					ref: ".ErrorResponse";
				}
			}
		}
	}
};


consider using an error-response fx.
message ErrorResponse{
	string correlationId = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
		pattern: "^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$",
		title: "x-correlation-id",
		description: "Unique event identifier for server requests",
		format: "uuid",
		example: "\"2438ac3c-37eb-4902-adef-ed16b4431030\""
	}];
	ErrorObject error = 2;
}

message ErrorObject{
	int32 code = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
		pattern: "^[0-9]$",
		title: "code",
		description: "Response code",
		format: "integer"
	}];
	string message = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
		pattern: "^[a-zA-Z0-9]{1, 32}$",
		title: "message",
		description: "Response message"
	}];
}
*/
import "ogc_meta.proto";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

import "protoc-gen-openapiv2/options/annotations.proto";


service OGCInspireService {

  rpc OGCLandingPage(google.protobuf.Empty) returns (OGCBaseResponse) {
    option (google.api.http) = { get: "/" };
  }

  rpc OGCConformance(google.protobuf.Empty) returns (OGCConformanceResponse) {
    option (google.api.http) = { get: "conformance" };
  }

  rpc OGCCollections(google.protobuf.Empty) returns (OGCCollectionsResponse) {
    option (google.api.http) = { get: "collections" };
  }

  rpc OGCCollection(OGCCollectionRequest) returns (OGCCollection) {
    option (google.api.http) = { get: "collections/{collection}" };
  }

  rpc OGCItems(OGCFeatureCollectionRequest) returns (OGCFeatureCollectionResponse) {
      option (google.api.http) = { get: "collections/{collection}/items" };
  }

  rpc OGCItem(OGCFeatureRequest) returns (OGCFeatureCollectionResponse) {
    option (google.api.http) = { get: "collections/{collection}/items/{id}" };
  }
}

